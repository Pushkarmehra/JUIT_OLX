{
  "info": {
    "name": "JUIT OLX OTP Verification API",
    "description": "Comprehensive API collection for testing the secure OTP verification system used in JUIT OLX marketplace. This collection includes all endpoints for requesting, verifying, and managing OTPs via email and SMS.",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string",
      "description": "Base URL for the OTP server"
    },
    {
      "key": "sessionId",
      "value": "",
      "type": "string",
      "description": "Current OTP session ID (auto-populated)"
    },
    {
      "key": "testEmail",
      "value": "test@juitsolan.in",
      "type": "string",
      "description": "Test JUIT email address"
    },
    {
      "key": "testPhone",
      "value": "+919876543210",
      "type": "string",
      "description": "Test phone number"
    }
  ],
  "item": [
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/health",
          "host": ["{{baseUrl}}"],
          "path": ["health"]
        },
        "description": "Check if the OTP server is running and healthy"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Server is healthy', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.status).to.eql('OK');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Get OTP Configuration",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/otp/config",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "config"]
        },
        "description": "Get the current OTP configuration including enabled services and limits"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Configuration retrieved successfully', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson).to.have.property('otpLength');",
              "    pm.expect(responseJson).to.have.property('expiryMinutes');",
              "    pm.expect(responseJson).to.have.property('maxAttempts');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Request Email OTP",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"email\",\n  \"email\": \"{{testEmail}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Request an OTP to be sent via email"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Email OTP requested successfully', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson).to.have.property('sessionId');",
              "    pm.expect(responseJson).to.have.property('expiryTime');",
              "    ",
              "    // Store session ID for subsequent requests",
              "    pm.collectionVariables.set('sessionId', responseJson.sessionId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Request SMS OTP",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"sms\",\n  \"phone\": \"{{testPhone}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Request an OTP to be sent via SMS"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('SMS OTP requested successfully', function () {",
              "    pm.response.to.have.status(200);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson).to.have.property('sessionId');",
              "    pm.expect(responseJson).to.have.property('expiryTime');",
              "    ",
              "    // Store session ID for subsequent requests",
              "    pm.collectionVariables.set('sessionId', responseJson.sessionId);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Verify OTP - Valid Code",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"identifier\": \"{{testEmail}}\",\n  \"otp\": \"123456\",\n  \"sessionId\": \"{{sessionId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/verify",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "verify"]
        },
        "description": "Verify OTP with a valid code (replace 123456 with actual OTP from email/SMS)"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('OTP verification response received', function () {",
              "    pm.response.to.be.ok;",
              "    const responseJson = pm.response.json();",
              "    ",
              "    if (pm.response.code === 200) {",
              "        pm.expect(responseJson.success).to.be.true;",
              "        pm.expect(responseJson).to.have.property('verifiedAt');",
              "        console.log('✓ OTP verified successfully');",
              "    } else {",
              "        console.log('⚠ OTP verification failed (expected if using dummy OTP)');",
              "        pm.expect(responseJson).to.have.property('error');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Verify OTP - Invalid Code",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"identifier\": \"{{testEmail}}\",\n  \"otp\": \"000000\",\n  \"sessionId\": \"{{sessionId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/verify",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "verify"]
        },
        "description": "Test OTP verification with an invalid code to check error handling"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid OTP handled correctly', function () {",
              "    pm.response.to.have.status(400);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include('Invalid OTP');",
              "    pm.expect(responseJson.code).to.eql('INVALID_OTP');",
              "    pm.expect(responseJson).to.have.property('remainingAttempts');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Resend OTP",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/resend",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "resend"]
        },
        "description": "Resend OTP for the current session"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('OTP resend response received', function () {",
              "    const responseJson = pm.response.json();",
              "    ",
              "    if (pm.response.code === 200) {",
              "        pm.expect(responseJson.success).to.be.true;",
              "        pm.expect(responseJson).to.have.property('expiryTime');",
              "        console.log('✓ OTP resent successfully');",
              "    } else if (pm.response.code === 429) {",
              "        pm.expect(responseJson.error).to.include('wait');",
              "        console.log('⚠ Resend blocked due to rate limiting (expected behavior)');",
              "    } else {",
              "        pm.expect(responseJson).to.have.property('error');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test Rate Limiting - Multiple OTP Requests",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"email\",\n  \"email\": \"ratelimit@juitsolan.in\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Test rate limiting by making multiple OTP requests"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Rate limiting works correctly', function () {",
              "    if (pm.response.code === 429) {",
              "        const responseJson = pm.response.json();",
              "        pm.expect(responseJson.error).to.include('Too many');",
              "        console.log('✓ Rate limiting is working');",
              "    } else if (pm.response.code === 200) {",
              "        console.log('⚠ Request succeeded (may need more requests to trigger rate limit)');",
              "    }",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test Invalid Email Format",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"email\",\n  \"email\": \"invalid@gmail.com\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Test validation with non-JUIT email address"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid email format rejected', function () {",
              "    pm.response.to.have.status(400);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include('Validation failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test Invalid Phone Format",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"sms\",\n  \"phone\": \"123456\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Test validation with invalid phone number format"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Invalid phone format rejected', function () {",
              "    pm.response.to.have.status(400);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include('Validation failed');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test Missing Parameters",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"type\": \"email\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/request",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "request"]
        },
        "description": "Test request with missing required parameters"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Missing parameters handled correctly', function () {",
              "    pm.response.to.have.status(400);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include('Email is required');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    },
    {
      "name": "Test Expired Session Verification",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"identifier\": \"{{testEmail}}\",\n  \"otp\": \"123456\",\n  \"sessionId\": \"expired-session-id\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/otp/verify",
          "host": ["{{baseUrl}}"],
          "path": ["api", "otp", "verify"]
        },
        "description": "Test verification with an expired or invalid session ID"
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Expired session handled correctly', function () {",
              "    pm.response.to.have.status(400);",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.include('Invalid or expired session');",
              "    pm.expect(responseJson.code).to.eql('SESSION_NOT_FOUND');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Set dynamic variables",
          "pm.collectionVariables.set('timestamp', Date.now());"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test to ensure response time is reasonable",
          "pm.test('Response time is less than 5000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(5000);",
          "});",
          "",
          "// Global test to ensure response has proper headers",
          "pm.test('Response has JSON content type', function () {",
          "    pm.expect(pm.response.headers.get('content-type')).to.include('application/json');",
          "});"
        ]
      }
    }
  ]
}
